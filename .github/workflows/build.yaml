name: build

on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - "*"

env:
  DEFAULT_OPENSSL_VERSION: 3.0.7
  NASM_VERSION: 2.16.01

jobs:
  select-openssl-version:
    name: "Select OpenSSL version to build from source"
    runs-on: ubuntu-latest
    outputs:
      openssl-version: ${{ steps.select-version.outputs.openssl-version }}
    steps:
      - id: select-version
        name: "Select OpenSSL version"
        shell: bash
        run: |
          if [ ${{ github.ref_type }} == "tag" ]; then
            echo "openssl-version=${{ github.ref_name }}" >>$GITHUB_OUTPUT
          else
            echo "openssl-version=${DEFAULT_OPENSSL_VERSION}" >>$GITHUB_OUTPUT
          fi
      - name: "Print selected OpenSSL version"
        shell: bash
        run: |
          echo "OPENSSL_VERSION: ${{ steps.select-version.outputs.openssl-version }}"

  download-openssl-source-distribution:
    name: "Download and cache OpenSSL source distribution"
    needs:
      - select-openssl-version
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    runs-on: ubuntu-latest
    steps:
      - name: "Download"
        run: |
          wget https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
          mv openssl-${OPENSSL_VERSION}.tar.gz openssl.tar.gz
      - name: "Cache"
        uses: actions/upload-artifact@v3
        with:
          name: openssl-source-distribution
          path: "openssl.tar.gz"

  download-nasm-binary:
    name: "Download and cache NASM binary"
    runs-on: ubuntu-latest
    steps:
      - name: "Download"
        run: |
          wget https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VERSION}/win64/nasm-${NASM_VERSION}-win64.zip
          mv nasm-${NASM_VERSION}-win64.zip nasm.zip
          unzip nasm.zip
          mv nasm-${NASM_VERSION}/nasm.exe nasm.exe
      - name: "Cache"
        uses: actions/upload-artifact@v3
        with:
          name: nasm-binary
          path: "nasm.exe"

  build-windows-2019-vs-2019-x64:
    name: "Build 64-bit OpenSSL binairies on Windows 2019, with Visual Studio 2019"
    needs:
      - select-openssl-version
      - download-openssl-source-distribution
      - download-nasm-binary
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve cached NASM binary"
        uses: actions/download-artifact@v3
        with:
          name: nasm-binary
      - name: "Retrieve cached OpenSSL source"
        uses: actions/download-artifact@v3
        with:
          name: openssl-source-distribution
      - name: "Extract OpenSSL source"
        shell: cmd
        run: |
          7z x openssl.tar.gz
          7z x openssl.tar
          mv openssl-%OPENSSL_VERSION% src
      - name: "Configure OpenSSL (64-bit)"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd src
          move ..\nasm.exe .
          perl Configure VC-WIN64A
      - name: "Build OpenSSL (64-bit)"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd src
          nmake
      #- name: "Test OpenSSL (64-bit)"
      #  shell: cmd
      #  run: |
      #    call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      #    cd src
      #    nmake test
      - name: "Install OpenSSL (64-bit)"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd src
          nmake install
      - name: "Bundle OpenSSL (64-bit)"
        shell: cmd
        run: |
          7z a -tzip openssl-binaries-x64.zip "%ProgramW6432%\OpenSSL" "%CommonProgramW6432%\SSL"
      - name: "Cache OpenSSL binaries (64-bit)"
        uses: actions/upload-artifact@v3
        with:
          name: openssl-binary-distribution-x64
          path: "openssl-binaries-x64.zip"

  test-cmake-windows-2019-vs-2019-x64:
    name: "Verify binaries can be consumed by CMake (64-bit)"
    needs:
      - select-openssl-version
      - build-windows-2019-vs-2019-x64
    runs-on: windows-2019
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve cached OpenSSL binaries (64-bit)"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x64
      - name: "Extract and install OpenSSL binaries (64-bit)"
        shell: cmd
        run: |
          7z x openssl-binaries-x64.zip -o"%ProgramW6432%\" OpenSSL\ -y
          7z x openssl-binaries-x64.zip -o"%CommonProgramW6432%\" SSL\ -y
      - name: "Generate Visual Studio 2019 Solution (64-bit)"
        shell: cmd
        run: |
          mkdir build
          cd build\
          cmake -G "Visual Studio 16 2019" -A x64 -DEXPECTED_OPENSSL_VERSION=%OPENSSL_VERSION% ..\test\
      - name: "Build Visual Studio 2019 Solution (64-bit)"
        shell: cmd
        run: |
          cd build\
          cmake --build . --target ALL_BUILD --config Release
      - name: "Execute simple integration test (64-bit)"
        shell: cmd
        run: |
          cd build\
          set PATH=%PATH%;%ProgramW6432%\OpenSSL\bin
          ctest --build-config Release

  build-windows-2019-vs-2019-x86:
    name: "Build 32-bit OpenSSL binairies on Windows 2019, with Visual Studio 2019"
    needs:
      - select-openssl-version
      - download-openssl-source-distribution
      - download-nasm-binary
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve cached NASM binary"
        uses: actions/download-artifact@v3
        with:
          name: nasm-binary
      - name: "Retrieve cached OpenSSL source"
        uses: actions/download-artifact@v3
        with:
          name: openssl-source-distribution
      - name: "Extract OpenSSL source"
        shell: cmd
        run: |
          7z x openssl.tar.gz
          7z x openssl.tar
          mv openssl-%OPENSSL_VERSION% src
      - name: "Configure OpenSSL (32-bit)"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          cd src
          move ..\nasm.exe .
          perl Configure VC-WIN32
      - name: "Build OpenSSL (32-bit)"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          cd src
          nmake
      #- name: "Test OpenSSL (32-bit)"
      #  shell: cmd
      #  run: |
      #    call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
      #    cd src
      #    nmake test
      - name: "Install OpenSSL (32-bit)"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          cd src
          nmake install
      - name: "Bundle OpenSSL (32-bit)"
        shell: cmd
        run: |
          7z a -tzip openssl-binaries-x86.zip "%ProgramFiles(x86)%\OpenSSL" "%CommonProgramFiles(x86)%\SSL"
      - name: "Cache OpenSSL binaries (32-bit)"
        uses: actions/upload-artifact@v3
        with:
          name: openssl-binary-distribution-x86
          path: "openssl-binaries-x86.zip"

  test-cmake-windows-2019-vs-2019-x86:
    name: "Verify binaries can be consumed by CMake (32-bit)"
    needs:
      - select-openssl-version
      - build-windows-2019-vs-2019-x86
    runs-on: windows-2019
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve cached OpenSSL binaries (32-bit)"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x86
      - name: "Extract and install OpenSSL binaries (32-bit)"
        shell: cmd
        run: |
          7z x openssl-binaries-x86.zip -o"%ProgramFiles(x86)%\" OpenSSL\ -y
          7z x openssl-binaries-x86.zip -o"%CommonProgramFiles(x86)%\" SSL\ -y
      - name: "Generate Visual Studio 2019 Solution (32-bit)"
        shell: cmd
        run: |
          mkdir build
          cd build\
          cmake -G "Visual Studio 16 2019" -A Win32 -DEXPECTED_OPENSSL_VERSION=%OPENSSL_VERSION% ..\test\
      - name: "Build Visual Studio 2019 Solution (32-bit)"
        shell: cmd
        run: |
          cd build\
          cmake --build . --target ALL_BUILD --config Release
      - name: "Execute simple integration test (32-bit)"
        shell: cmd
        run: |
          cd build\
          set PATH=%PATH%;%ProgramFiles(x86)%\OpenSSL\bin
          ctest --build-config Release

  release:
    if: github.ref_type == 'tag'
    name: "Release OpenSSL binairies"
    needs:
      - test-cmake-windows-2019-vs-2019-x64
      - test-cmake-windows-2019-vs-2019-x86
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # NOTE: even though we don't need any files, we can't run
      #   `gh release create` unless we clone the Git repository.
      - uses: actions/checkout@v3
      - name: "Retrieve cached OpenSSL binaries (64-bit)"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x64
      - name: "Retrieve cached OpenSSL binaries (32-bit)"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x86
      - name: "Create GitHub release and upload binaries"
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mv openssl-binaries-x64.zip openssl-${{ github.ref_name }}-binaries-x64.zip
          mv openssl-binaries-x86.zip openssl-${{ github.ref_name }}-binaries-x86.zip
          gh release create --verify-tag ${{ github.ref_name }} \
            openssl-${{ github.ref_name }}-binaries-x64.zip \
            openssl-${{ github.ref_name }}-binaries-x86.zip
