name: build

on:
  pull_request:
    branches:
      - main
  push:
    tags:
      - "*"

env:
  DEFAULT_OPENSSL_VERSION: 3.0.7
  NASM_VERSION: 2.16.01

jobs:
  select-openssl-version:
    name: "Select version"
    runs-on: ubuntu-latest
    outputs:
      openssl-version: ${{ steps.select-version.outputs.openssl-version }}
    steps:
      - id: select-version
        name: "Select"
        shell: bash
        run: |
          if [ ${{ github.ref_type }} == "tag" ]; then
            echo "openssl-version=${{ github.ref_name }}" >>$GITHUB_OUTPUT
          else
            echo "openssl-version=${DEFAULT_OPENSSL_VERSION}" >>$GITHUB_OUTPUT
          fi
      - name: "Display"
        shell: bash
        run: |
          echo "OPENSSL_VERSION: ${{ steps.select-version.outputs.openssl-version }}"

  download-openssl-source-distribution:
    name: "Download source"
    needs:
      - select-openssl-version
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    runs-on: ubuntu-latest
    steps:
      - name: "Download"
        run: |
          wget https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz
          mv openssl-${OPENSSL_VERSION}.tar.gz openssl.tar.gz
      - name: "Cache"
        uses: actions/upload-artifact@v3
        with:
          name: openssl-source-distribution
          path: "openssl.tar.gz"

  download-nasm-binary:
    name: "Download NASM"
    runs-on: ubuntu-latest
    steps:
      - name: "Download"
        run: |
          wget https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VERSION}/win64/nasm-${NASM_VERSION}-win64.zip
          mv nasm-${NASM_VERSION}-win64.zip nasm.zip
          unzip nasm.zip
          mv nasm-${NASM_VERSION}/nasm.exe nasm.exe
      - name: "Cache"
        uses: actions/upload-artifact@v3
        with:
          name: nasm-binary
          path: "nasm.exe"

  build-windows-2019-vs-2019-x64-dll:
    name: "Build 64-bit DLL (VS 2019 on Windows 2019)"
    needs:
      - select-openssl-version
      - download-openssl-source-distribution
      - download-nasm-binary
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve NASM"
        uses: actions/download-artifact@v3
        with:
          name: nasm-binary
      - name: "Retrieve source"
        uses: actions/download-artifact@v3
        with:
          name: openssl-source-distribution
      - name: "Extract"
        shell: cmd
        run: |
          7z x openssl.tar.gz
          7z x openssl.tar
          mv openssl-%OPENSSL_VERSION% src
      - name: "Configure"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd src
          move ..\nasm.exe .
          perl Configure VC-WIN64A
      - name: "Build"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd src
          nmake
      - name: "Self-test"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd src
          nmake test
      - name: "Install"
        shell: cmd
        # NOTE: the GitHub action runners' Windows VM seems to include
        #  OpenSSL 1.1.x at the same path where we install OpenSSL, so
        #  let's delete that first.  Don't do this on your own machine!
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          rmdir /q /s "%ProgramW6432%\OpenSSL"
          rmdir /q /s "%CommonProgramW6432%\SSL"
          cd src
          nmake install
      - name: "Bundle"
        shell: cmd
        run: |
          7z a -tzip openssl-binaries-x64-dll.zip "%ProgramW6432%\OpenSSL" "%CommonProgramW6432%\SSL"
      - name: "Cache binaries"
        uses: actions/upload-artifact@v3
        with:
          name: openssl-binary-distribution-x64-dll
          path: "openssl-binaries-x64-dll.zip"

  test-cmake-windows-2019-vs-2019-x64-dll:
    name: "CMake test 64-bit DLL (VS 2019 on Windows 2019)"
    needs:
      - select-openssl-version
      - build-windows-2019-vs-2019-x64-dll
    runs-on: windows-2019
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve binaries"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x64-dll
      - name: "Install"
        shell: cmd
        run: |
          rmdir /q /s "%ProgramW6432%\OpenSSL"
          rmdir /q /s "%CommonProgramW6432%\SSL"
          7z x openssl-binaries-x64-dll.zip -o"%ProgramW6432%\" OpenSSL\ -y
          7z x openssl-binaries-x64-dll.zip -o"%CommonProgramW6432%\" SSL\ -y
      - name: "Generate VS solution"
        shell: cmd
        run: |
          mkdir build
          cd build\
          cmake -G "Visual Studio 16 2019" -A x64 -DEXPECTED_OPENSSL_VERSION=%OPENSSL_VERSION% ..\test\
      - name: "Build VS solution"
        shell: cmd
        run: |
          cd build\
          cmake --build . --target ALL_BUILD --config Release
      - name: "Integration test"
        shell: cmd
        run: |
          cd build\
          ctest --build-config Release --output-on-failure

  build-windows-2019-vs-2019-x64-static:
    name: "Build 64-bit LIB (VS 2019 on Windows 2019)"
    needs:
      - select-openssl-version
      - download-openssl-source-distribution
      - download-nasm-binary
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve NASM"
        uses: actions/download-artifact@v3
        with:
          name: nasm-binary
      - name: "Retrieve source"
        uses: actions/download-artifact@v3
        with:
          name: openssl-source-distribution
      - name: "Extract"
        shell: cmd
        run: |
          7z x openssl.tar.gz
          7z x openssl.tar
          mv openssl-%OPENSSL_VERSION% src
      - name: "Configure"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd src
          move ..\nasm.exe .
          perl Configure VC-WIN64A -static
      - name: "Build"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd src
          nmake
      - name: "Self-test"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cd src
          nmake test
      - name: "Install"
        shell: cmd
        # NOTE: the GitHub action runners' Windows VM seems to include
        #  OpenSSL 1.1.x at the same path where we install OpenSSL, so
        #  let's delete that first.  Don't do this on your own machine!
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          rmdir /q /s "%ProgramW6432%\OpenSSL"
          rmdir /q /s "%CommonProgramW6432%\SSL"
          cd src
          nmake install
      - name: "Bundle"
        shell: cmd
        run: |
          7z a -tzip openssl-binaries-x64-static.zip "%ProgramW6432%\OpenSSL" "%CommonProgramW6432%\SSL"
      - name: "Cache binaries"
        uses: actions/upload-artifact@v3
        with:
          name: openssl-binary-distribution-x64-static
          path: "openssl-binaries-x64-static.zip"

  test-cmake-windows-2019-vs-2019-x64-static:
    name: "CMake test 64-bit LIB (VS 2019 on Windows 2019)"
    needs:
      - select-openssl-version
      - build-windows-2019-vs-2019-x64-static
    runs-on: windows-2019
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve binaries"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x64-static
      - name: "Install"
        shell: cmd
        run: |
          rmdir /q /s "%ProgramW6432%\OpenSSL"
          rmdir /q /s "%CommonProgramW6432%\SSL"
          7z x openssl-binaries-x64-static.zip -o"%ProgramW6432%\" OpenSSL\ -y
          7z x openssl-binaries-x64-static.zip -o"%CommonProgramW6432%\" SSL\ -y
      - name: "Generate VS solution"
        shell: cmd
        run: |
          mkdir build
          cd build\
          cmake -G "Visual Studio 16 2019" -A x64 -DOPENSSL_DLL=OFF -DEXPECTED_OPENSSL_VERSION=%OPENSSL_VERSION% ..\test\
      - name: "Build VS solution"
        shell: cmd
        run: |
          cd build\
          cmake --build . --target ALL_BUILD --config Release
      - name: "Integration test"
        shell: cmd
        run: |
          cd build\
          ctest --build-config Release --output-on-failure

  build-windows-2019-vs-2019-x86-dll:
    name: "Build 32-bit DLL (VS 2019 on Windows 2019)"
    needs:
      - select-openssl-version
      - download-openssl-source-distribution
      - download-nasm-binary
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve NASM"
        uses: actions/download-artifact@v3
        with:
          name: nasm-binary
      - name: "Retrieve source"
        uses: actions/download-artifact@v3
        with:
          name: openssl-source-distribution
      - name: "Extract"
        shell: cmd
        run: |
          7z x openssl.tar.gz
          7z x openssl.tar
          mv openssl-%OPENSSL_VERSION% src
      - name: "Configure"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          cd src
          move ..\nasm.exe .
          perl Configure VC-WIN32
      - name: "Build"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          cd src
          nmake
      - name: "Self-test"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          cd src
          nmake test
      - name: "Install"
        shell: cmd
        # NOTE: the GitHub action runners' Windows VM seems to include
        #  OpenSSL 1.1.x at the same path where we install OpenSSL, so
        #  let's delete that first.  Don't do this on your own machine!
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          cd src
          rmdir /q /s "%ProgramFiles(x86)%\OpenSSL"
          rmdir /q /s "%CommonProgramFiles(x86)%\SSL"
          nmake install
      - name: "Bundle"
        shell: cmd
        run: |
          7z a -tzip openssl-binaries-x86-dll.zip "%ProgramFiles(x86)%\OpenSSL" "%CommonProgramFiles(x86)%\SSL"
      - name: "Cache binaries"
        uses: actions/upload-artifact@v3
        with:
          name: openssl-binary-distribution-x86-dll
          path: "openssl-binaries-x86-dll.zip"

  test-cmake-windows-2019-vs-2019-x86-dll:
    name: "CMake test 32-bit DLL (VS 2019 on Windows 2019)"
    needs:
      - select-openssl-version
      - build-windows-2019-vs-2019-x86-dll
    runs-on: windows-2019
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve binaries"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x86-dll
      - name: "Install"
        shell: cmd
        run: |
          rmdir /q /s "%ProgramFiles(x86)%\OpenSSL"
          rmdir /q /s "%CommonProgramFiles(x86)%\SSL"
          7z x openssl-binaries-x86-dll.zip -o"%ProgramFiles(x86)%\" OpenSSL\ -y
          7z x openssl-binaries-x86-dll.zip -o"%CommonProgramFiles(x86)%\" SSL\ -y
      - name: "Generate VS solution"
        shell: cmd
        run: |
          mkdir build
          cd build\
          cmake -G "Visual Studio 16 2019" -A Win32 -DEXPECTED_OPENSSL_VERSION=%OPENSSL_VERSION% ..\test\
      - name: "Build VS solution"
        shell: cmd
        run: |
          cd build\
          cmake --build . --target ALL_BUILD --config Release
      - name: "Integration test"
        shell: cmd
        # NOTE: the OpenSSL DLL must be in PATH (or copied into the
        #   same folder as our test executable).  Normally, we'd
        #   append the path to the OpenSSL binaries to PATH, but if
        #   anything else in PATH has a DLL with the same name, the
        #   other one will be found first and we might not get the
        #   version we just built when running our tests.
        #
        #   To work around this issue, insert the binaries at the
        #   front of PATH when running these tests.  This is safe in a
        #   throwaway VM (or in a script that temporarily edits PATH
        #   in a dedicated terminal), but don't do this on anybody's
        #   machine.
        run: |
          cd build\
          ctest --build-config Release --output-on-failure

  build-windows-2019-vs-2019-x86-static:
    name: "Build 32-bit LIB (VS 2019 on Windows 2019)"
    needs:
      - select-openssl-version
      - download-openssl-source-distribution
      - download-nasm-binary
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve NASM"
        uses: actions/download-artifact@v3
        with:
          name: nasm-binary
      - name: "Retrieve source"
        uses: actions/download-artifact@v3
        with:
          name: openssl-source-distribution
      - name: "Extract source"
        shell: cmd
        run: |
          7z x openssl.tar.gz
          7z x openssl.tar
          mv openssl-%OPENSSL_VERSION% src
      - name: "Configure"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          cd src
          move ..\nasm.exe .
          perl Configure VC-WIN32 -static
      - name: "Build"
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          cd src
          nmake
      #- name: "Test OpenSSL (32-bit)"
      #  shell: cmd
      #  run: |
      #    call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
      #    cd src
      #    nmake test
      - name: "Install"
        shell: cmd
        # NOTE: the GitHub action runners' Windows VM seems to include
        #  OpenSSL 1.1.x at the same path where we install OpenSSL, so
        #  let's delete that first.  Don't do this on your own machine!
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          cd src
          rmdir /q /s "%ProgramFiles(x86)%\OpenSSL"
          rmdir /q /s "%CommonProgramFiles(x86)%\SSL"
          nmake install
      - name: "Bundle"
        shell: cmd
        run: |
          7z a -tzip openssl-binaries-x86-static.zip "%ProgramFiles(x86)%\OpenSSL" "%CommonProgramFiles(x86)%\SSL"
      - name: "Cache binaries"
        uses: actions/upload-artifact@v3
        with:
          name: openssl-binary-distribution-x86-static
          path: "openssl-binaries-x86-static.zip"

  test-cmake-windows-2019-vs-2019-x86-static:
    name: "CMake test 32-bit LIB (VS 2019 on Windows 2019)"
    needs:
      - select-openssl-version
      - build-windows-2019-vs-2019-x86-static
    runs-on: windows-2019
    env:
      OPENSSL_VERSION: ${{ needs.select-openssl-version.outputs.openssl-version }}
    steps:
      - uses: actions/checkout@v3
      - name: "Retrieve cached binaries"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x86-static
      - name: "Install"
        shell: cmd
        run: |
          rmdir /q /s "%ProgramFiles(x86)%\OpenSSL"
          rmdir /q /s "%CommonProgramFiles(x86)%\SSL"
          7z x openssl-binaries-x86-static.zip -o"%ProgramFiles(x86)%\" OpenSSL\ -y
          7z x openssl-binaries-x86-static.zip -o"%CommonProgramFiles(x86)%\" SSL\ -y
      - name: "Generate VS solution"
        shell: cmd
        run: |
          mkdir build
          cd build\
          cmake -G "Visual Studio 16 2019" -A Win32 -DOPENSSL_DLL=OFF -DEXPECTED_OPENSSL_VERSION=%OPENSSL_VERSION% ..\test\
      - name: "Build VS solution"
        shell: cmd
        run: |
          cd build\
          cmake --build . --target ALL_BUILD --config Release
      - name: "Integration test"
        shell: cmd
        # NOTE: the OpenSSL DLL must be in PATH (or copied into the
        #   same folder as our test executable).  Normally, we'd
        #   append the path to the OpenSSL binaries to PATH, but if
        #   anything else in PATH has a DLL with the same name, the
        #   other one will be found first and we might not get the
        #   version we just built when running our tests.
        #
        #   To work around this issue, insert the binaries at the
        #   front of PATH when running these tests.  This is safe in a
        #   throwaway VM (or in a script that temporarily edits PATH
        #   in a dedicated terminal), but don't do this on anybody's
        #   machine.
        run: |
          cd build\
          ctest --build-config Release --output-on-failure

  release:
    if: github.ref_type == 'tag'
    name: "Publish binairies"
    needs:
      - test-cmake-windows-2019-vs-2019-x64-dll
      - test-cmake-windows-2019-vs-2019-x64-static
      - test-cmake-windows-2019-vs-2019-x86-dll
      - test-cmake-windows-2019-vs-2019-x86-static
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # NOTE: even though we don't need any files, we can't run
      #   `gh release create` unless we clone the Git repository.
      - uses: actions/checkout@v3
      - name: "Retrieve binaries (64-bit DLL)"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x64-dll
      - uses: actions/checkout@v3
      - name: "Retrieve binaries (64-bit LIB)"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x64-static
      - name: "Retrieve binaries (32-bit DLL)"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x86-dll
      - name: "Retrieve binaries (32-bit LIB)"
        uses: actions/download-artifact@v3
        with:
          name: openssl-binary-distribution-x86-static
      - name: "Publish"
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mv openssl-binaries-x64-dll.zip openssl-${{ github.ref_name }}-binaries-x64-dll.zip
          mv openssl-binaries-x64-dll.zip openssl-${{ github.ref_name }}-binaries-x64-static.zip
          mv openssl-binaries-x86-dll.zip openssl-${{ github.ref_name }}-binaries-x86-dll.zip
          mv openssl-binaries-x86-dll.zip openssl-${{ github.ref_name }}-binaries-x86-static.zip
          gh release create --verify-tag ${{ github.ref_name }} \ \
            openssl-${{ github.ref_name }}-binaries-x64-dll.zip \
            openssl-${{ github.ref_name }}-binaries-x64-static.zip \
            openssl-${{ github.ref_name }}-binaries-x86-dll.zip \
            openssl-${{ github.ref_name }}-binaries-x86-static.zip
